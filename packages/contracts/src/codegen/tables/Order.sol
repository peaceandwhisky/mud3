// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct OrderData {
  address user;
  address baseToken;
  address quoteToken;
  uint256 price;
  uint256 amount;
  bool isBuy;
  bool active;
  uint256 timestamp;
}

library Order {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "app", name: "Order", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x746261707000000000000000000000004f726465720000000000000000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x009e080014141420200101200000000000000000000000000000000000000000);

  // Hex-encoded key schema of (uint256)
  Schema constant _keySchema = Schema.wrap(0x002001001f000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (address, address, address, uint256, uint256, bool, bool, uint256)
  Schema constant _valueSchema = Schema.wrap(0x009e08006161611f1f60601f0000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "orderId";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](8);
    fieldNames[0] = "user";
    fieldNames[1] = "baseToken";
    fieldNames[2] = "quoteToken";
    fieldNames[3] = "price";
    fieldNames[4] = "amount";
    fieldNames[5] = "isBuy";
    fieldNames[6] = "active";
    fieldNames[7] = "timestamp";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get user.
   */
  function getUser(uint256 orderId) internal view returns (address user) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(orderId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get user.
   */
  function _getUser(uint256 orderId) internal view returns (address user) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(orderId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set user.
   */
  function setUser(uint256 orderId, address user) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(orderId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((user)), _fieldLayout);
  }

  /**
   * @notice Set user.
   */
  function _setUser(uint256 orderId, address user) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(orderId));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((user)), _fieldLayout);
  }

  /**
   * @notice Get baseToken.
   */
  function getBaseToken(uint256 orderId) internal view returns (address baseToken) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(orderId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get baseToken.
   */
  function _getBaseToken(uint256 orderId) internal view returns (address baseToken) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(orderId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set baseToken.
   */
  function setBaseToken(uint256 orderId, address baseToken) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(orderId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((baseToken)), _fieldLayout);
  }

  /**
   * @notice Set baseToken.
   */
  function _setBaseToken(uint256 orderId, address baseToken) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(orderId));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((baseToken)), _fieldLayout);
  }

  /**
   * @notice Get quoteToken.
   */
  function getQuoteToken(uint256 orderId) internal view returns (address quoteToken) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(orderId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get quoteToken.
   */
  function _getQuoteToken(uint256 orderId) internal view returns (address quoteToken) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(orderId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set quoteToken.
   */
  function setQuoteToken(uint256 orderId, address quoteToken) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(orderId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((quoteToken)), _fieldLayout);
  }

  /**
   * @notice Set quoteToken.
   */
  function _setQuoteToken(uint256 orderId, address quoteToken) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(orderId));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((quoteToken)), _fieldLayout);
  }

  /**
   * @notice Get price.
   */
  function getPrice(uint256 orderId) internal view returns (uint256 price) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(orderId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get price.
   */
  function _getPrice(uint256 orderId) internal view returns (uint256 price) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(orderId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set price.
   */
  function setPrice(uint256 orderId, uint256 price) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(orderId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((price)), _fieldLayout);
  }

  /**
   * @notice Set price.
   */
  function _setPrice(uint256 orderId, uint256 price) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(orderId));

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((price)), _fieldLayout);
  }

  /**
   * @notice Get amount.
   */
  function getAmount(uint256 orderId) internal view returns (uint256 amount) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(orderId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get amount.
   */
  function _getAmount(uint256 orderId) internal view returns (uint256 amount) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(orderId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set amount.
   */
  function setAmount(uint256 orderId, uint256 amount) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(orderId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((amount)), _fieldLayout);
  }

  /**
   * @notice Set amount.
   */
  function _setAmount(uint256 orderId, uint256 amount) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(orderId));

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((amount)), _fieldLayout);
  }

  /**
   * @notice Get isBuy.
   */
  function getIsBuy(uint256 orderId) internal view returns (bool isBuy) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(orderId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get isBuy.
   */
  function _getIsBuy(uint256 orderId) internal view returns (bool isBuy) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(orderId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set isBuy.
   */
  function setIsBuy(uint256 orderId, bool isBuy) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(orderId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((isBuy)), _fieldLayout);
  }

  /**
   * @notice Set isBuy.
   */
  function _setIsBuy(uint256 orderId, bool isBuy) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(orderId));

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((isBuy)), _fieldLayout);
  }

  /**
   * @notice Get active.
   */
  function getActive(uint256 orderId) internal view returns (bool active) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(orderId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get active.
   */
  function _getActive(uint256 orderId) internal view returns (bool active) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(orderId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set active.
   */
  function setActive(uint256 orderId, bool active) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(orderId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((active)), _fieldLayout);
  }

  /**
   * @notice Set active.
   */
  function _setActive(uint256 orderId, bool active) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(orderId));

    StoreCore.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((active)), _fieldLayout);
  }

  /**
   * @notice Get timestamp.
   */
  function getTimestamp(uint256 orderId) internal view returns (uint256 timestamp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(orderId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get timestamp.
   */
  function _getTimestamp(uint256 orderId) internal view returns (uint256 timestamp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(orderId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set timestamp.
   */
  function setTimestamp(uint256 orderId, uint256 timestamp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(orderId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((timestamp)), _fieldLayout);
  }

  /**
   * @notice Set timestamp.
   */
  function _setTimestamp(uint256 orderId, uint256 timestamp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(orderId));

    StoreCore.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((timestamp)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(uint256 orderId) internal view returns (OrderData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(orderId));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(uint256 orderId) internal view returns (OrderData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(orderId));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    uint256 orderId,
    address user,
    address baseToken,
    address quoteToken,
    uint256 price,
    uint256 amount,
    bool isBuy,
    bool active,
    uint256 timestamp
  ) internal {
    bytes memory _staticData = encodeStatic(user, baseToken, quoteToken, price, amount, isBuy, active, timestamp);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(orderId));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    uint256 orderId,
    address user,
    address baseToken,
    address quoteToken,
    uint256 price,
    uint256 amount,
    bool isBuy,
    bool active,
    uint256 timestamp
  ) internal {
    bytes memory _staticData = encodeStatic(user, baseToken, quoteToken, price, amount, isBuy, active, timestamp);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(orderId));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(uint256 orderId, OrderData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.user,
      _table.baseToken,
      _table.quoteToken,
      _table.price,
      _table.amount,
      _table.isBuy,
      _table.active,
      _table.timestamp
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(orderId));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(uint256 orderId, OrderData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.user,
      _table.baseToken,
      _table.quoteToken,
      _table.price,
      _table.amount,
      _table.isBuy,
      _table.active,
      _table.timestamp
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(orderId));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      address user,
      address baseToken,
      address quoteToken,
      uint256 price,
      uint256 amount,
      bool isBuy,
      bool active,
      uint256 timestamp
    )
  {
    user = (address(Bytes.getBytes20(_blob, 0)));

    baseToken = (address(Bytes.getBytes20(_blob, 20)));

    quoteToken = (address(Bytes.getBytes20(_blob, 40)));

    price = (uint256(Bytes.getBytes32(_blob, 60)));

    amount = (uint256(Bytes.getBytes32(_blob, 92)));

    isBuy = (_toBool(uint8(Bytes.getBytes1(_blob, 124))));

    active = (_toBool(uint8(Bytes.getBytes1(_blob, 125))));

    timestamp = (uint256(Bytes.getBytes32(_blob, 126)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (OrderData memory _table) {
    (
      _table.user,
      _table.baseToken,
      _table.quoteToken,
      _table.price,
      _table.amount,
      _table.isBuy,
      _table.active,
      _table.timestamp
    ) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(uint256 orderId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(orderId));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(uint256 orderId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(orderId));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    address user,
    address baseToken,
    address quoteToken,
    uint256 price,
    uint256 amount,
    bool isBuy,
    bool active,
    uint256 timestamp
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(user, baseToken, quoteToken, price, amount, isBuy, active, timestamp);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    address user,
    address baseToken,
    address quoteToken,
    uint256 price,
    uint256 amount,
    bool isBuy,
    bool active,
    uint256 timestamp
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(user, baseToken, quoteToken, price, amount, isBuy, active, timestamp);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(uint256 orderId) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(orderId));

    return _keyTuple;
  }
}

/**
 * @notice Cast a value to a bool.
 * @dev Boolean values are encoded as uint8 (1 = true, 0 = false), but Solidity doesn't allow casting between uint8 and bool.
 * @param value The uint8 value to convert.
 * @return result The boolean value.
 */
function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}
