// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct OrderData {
  uint8 orderSide;
  uint256 timestamp;
  bool active;
  uint256 next;
}

library Order {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "app", name: "Order", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x746261707000000000000000000000004f726465720000000000000000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0042040001200120000000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (address, address, address, uint256, uint256)
  Schema constant _keySchema = Schema.wrap(0x007c05006161611f1f0000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint8, uint256, bool, uint256)
  Schema constant _valueSchema = Schema.wrap(0x00420400001f601f000000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](5);
    keyNames[0] = "user";
    keyNames[1] = "baseToken";
    keyNames[2] = "quoteToken";
    keyNames[3] = "price";
    keyNames[4] = "amount";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](4);
    fieldNames[0] = "orderSide";
    fieldNames[1] = "timestamp";
    fieldNames[2] = "active";
    fieldNames[3] = "next";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get orderSide.
   */
  function getOrderSide(
    address user,
    address baseToken,
    address quoteToken,
    uint256 price,
    uint256 amount
  ) internal view returns (uint8 orderSide) {
    bytes32[] memory _keyTuple = new bytes32[](5);
    _keyTuple[0] = bytes32(uint256(uint160(user)));
    _keyTuple[1] = bytes32(uint256(uint160(baseToken)));
    _keyTuple[2] = bytes32(uint256(uint160(quoteToken)));
    _keyTuple[3] = bytes32(uint256(price));
    _keyTuple[4] = bytes32(uint256(amount));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get orderSide.
   */
  function _getOrderSide(
    address user,
    address baseToken,
    address quoteToken,
    uint256 price,
    uint256 amount
  ) internal view returns (uint8 orderSide) {
    bytes32[] memory _keyTuple = new bytes32[](5);
    _keyTuple[0] = bytes32(uint256(uint160(user)));
    _keyTuple[1] = bytes32(uint256(uint160(baseToken)));
    _keyTuple[2] = bytes32(uint256(uint160(quoteToken)));
    _keyTuple[3] = bytes32(uint256(price));
    _keyTuple[4] = bytes32(uint256(amount));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set orderSide.
   */
  function setOrderSide(
    address user,
    address baseToken,
    address quoteToken,
    uint256 price,
    uint256 amount,
    uint8 orderSide
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](5);
    _keyTuple[0] = bytes32(uint256(uint160(user)));
    _keyTuple[1] = bytes32(uint256(uint160(baseToken)));
    _keyTuple[2] = bytes32(uint256(uint160(quoteToken)));
    _keyTuple[3] = bytes32(uint256(price));
    _keyTuple[4] = bytes32(uint256(amount));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((orderSide)), _fieldLayout);
  }

  /**
   * @notice Set orderSide.
   */
  function _setOrderSide(
    address user,
    address baseToken,
    address quoteToken,
    uint256 price,
    uint256 amount,
    uint8 orderSide
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](5);
    _keyTuple[0] = bytes32(uint256(uint160(user)));
    _keyTuple[1] = bytes32(uint256(uint160(baseToken)));
    _keyTuple[2] = bytes32(uint256(uint160(quoteToken)));
    _keyTuple[3] = bytes32(uint256(price));
    _keyTuple[4] = bytes32(uint256(amount));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((orderSide)), _fieldLayout);
  }

  /**
   * @notice Get timestamp.
   */
  function getTimestamp(
    address user,
    address baseToken,
    address quoteToken,
    uint256 price,
    uint256 amount
  ) internal view returns (uint256 timestamp) {
    bytes32[] memory _keyTuple = new bytes32[](5);
    _keyTuple[0] = bytes32(uint256(uint160(user)));
    _keyTuple[1] = bytes32(uint256(uint160(baseToken)));
    _keyTuple[2] = bytes32(uint256(uint160(quoteToken)));
    _keyTuple[3] = bytes32(uint256(price));
    _keyTuple[4] = bytes32(uint256(amount));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get timestamp.
   */
  function _getTimestamp(
    address user,
    address baseToken,
    address quoteToken,
    uint256 price,
    uint256 amount
  ) internal view returns (uint256 timestamp) {
    bytes32[] memory _keyTuple = new bytes32[](5);
    _keyTuple[0] = bytes32(uint256(uint160(user)));
    _keyTuple[1] = bytes32(uint256(uint160(baseToken)));
    _keyTuple[2] = bytes32(uint256(uint160(quoteToken)));
    _keyTuple[3] = bytes32(uint256(price));
    _keyTuple[4] = bytes32(uint256(amount));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set timestamp.
   */
  function setTimestamp(
    address user,
    address baseToken,
    address quoteToken,
    uint256 price,
    uint256 amount,
    uint256 timestamp
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](5);
    _keyTuple[0] = bytes32(uint256(uint160(user)));
    _keyTuple[1] = bytes32(uint256(uint160(baseToken)));
    _keyTuple[2] = bytes32(uint256(uint160(quoteToken)));
    _keyTuple[3] = bytes32(uint256(price));
    _keyTuple[4] = bytes32(uint256(amount));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((timestamp)), _fieldLayout);
  }

  /**
   * @notice Set timestamp.
   */
  function _setTimestamp(
    address user,
    address baseToken,
    address quoteToken,
    uint256 price,
    uint256 amount,
    uint256 timestamp
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](5);
    _keyTuple[0] = bytes32(uint256(uint160(user)));
    _keyTuple[1] = bytes32(uint256(uint160(baseToken)));
    _keyTuple[2] = bytes32(uint256(uint160(quoteToken)));
    _keyTuple[3] = bytes32(uint256(price));
    _keyTuple[4] = bytes32(uint256(amount));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((timestamp)), _fieldLayout);
  }

  /**
   * @notice Get active.
   */
  function getActive(
    address user,
    address baseToken,
    address quoteToken,
    uint256 price,
    uint256 amount
  ) internal view returns (bool active) {
    bytes32[] memory _keyTuple = new bytes32[](5);
    _keyTuple[0] = bytes32(uint256(uint160(user)));
    _keyTuple[1] = bytes32(uint256(uint160(baseToken)));
    _keyTuple[2] = bytes32(uint256(uint160(quoteToken)));
    _keyTuple[3] = bytes32(uint256(price));
    _keyTuple[4] = bytes32(uint256(amount));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get active.
   */
  function _getActive(
    address user,
    address baseToken,
    address quoteToken,
    uint256 price,
    uint256 amount
  ) internal view returns (bool active) {
    bytes32[] memory _keyTuple = new bytes32[](5);
    _keyTuple[0] = bytes32(uint256(uint160(user)));
    _keyTuple[1] = bytes32(uint256(uint160(baseToken)));
    _keyTuple[2] = bytes32(uint256(uint160(quoteToken)));
    _keyTuple[3] = bytes32(uint256(price));
    _keyTuple[4] = bytes32(uint256(amount));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set active.
   */
  function setActive(
    address user,
    address baseToken,
    address quoteToken,
    uint256 price,
    uint256 amount,
    bool active
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](5);
    _keyTuple[0] = bytes32(uint256(uint160(user)));
    _keyTuple[1] = bytes32(uint256(uint160(baseToken)));
    _keyTuple[2] = bytes32(uint256(uint160(quoteToken)));
    _keyTuple[3] = bytes32(uint256(price));
    _keyTuple[4] = bytes32(uint256(amount));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((active)), _fieldLayout);
  }

  /**
   * @notice Set active.
   */
  function _setActive(
    address user,
    address baseToken,
    address quoteToken,
    uint256 price,
    uint256 amount,
    bool active
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](5);
    _keyTuple[0] = bytes32(uint256(uint160(user)));
    _keyTuple[1] = bytes32(uint256(uint160(baseToken)));
    _keyTuple[2] = bytes32(uint256(uint160(quoteToken)));
    _keyTuple[3] = bytes32(uint256(price));
    _keyTuple[4] = bytes32(uint256(amount));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((active)), _fieldLayout);
  }

  /**
   * @notice Get next.
   */
  function getNext(
    address user,
    address baseToken,
    address quoteToken,
    uint256 price,
    uint256 amount
  ) internal view returns (uint256 next) {
    bytes32[] memory _keyTuple = new bytes32[](5);
    _keyTuple[0] = bytes32(uint256(uint160(user)));
    _keyTuple[1] = bytes32(uint256(uint160(baseToken)));
    _keyTuple[2] = bytes32(uint256(uint160(quoteToken)));
    _keyTuple[3] = bytes32(uint256(price));
    _keyTuple[4] = bytes32(uint256(amount));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get next.
   */
  function _getNext(
    address user,
    address baseToken,
    address quoteToken,
    uint256 price,
    uint256 amount
  ) internal view returns (uint256 next) {
    bytes32[] memory _keyTuple = new bytes32[](5);
    _keyTuple[0] = bytes32(uint256(uint160(user)));
    _keyTuple[1] = bytes32(uint256(uint160(baseToken)));
    _keyTuple[2] = bytes32(uint256(uint160(quoteToken)));
    _keyTuple[3] = bytes32(uint256(price));
    _keyTuple[4] = bytes32(uint256(amount));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set next.
   */
  function setNext(
    address user,
    address baseToken,
    address quoteToken,
    uint256 price,
    uint256 amount,
    uint256 next
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](5);
    _keyTuple[0] = bytes32(uint256(uint160(user)));
    _keyTuple[1] = bytes32(uint256(uint160(baseToken)));
    _keyTuple[2] = bytes32(uint256(uint160(quoteToken)));
    _keyTuple[3] = bytes32(uint256(price));
    _keyTuple[4] = bytes32(uint256(amount));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((next)), _fieldLayout);
  }

  /**
   * @notice Set next.
   */
  function _setNext(
    address user,
    address baseToken,
    address quoteToken,
    uint256 price,
    uint256 amount,
    uint256 next
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](5);
    _keyTuple[0] = bytes32(uint256(uint160(user)));
    _keyTuple[1] = bytes32(uint256(uint160(baseToken)));
    _keyTuple[2] = bytes32(uint256(uint160(quoteToken)));
    _keyTuple[3] = bytes32(uint256(price));
    _keyTuple[4] = bytes32(uint256(amount));

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((next)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(
    address user,
    address baseToken,
    address quoteToken,
    uint256 price,
    uint256 amount
  ) internal view returns (OrderData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](5);
    _keyTuple[0] = bytes32(uint256(uint160(user)));
    _keyTuple[1] = bytes32(uint256(uint160(baseToken)));
    _keyTuple[2] = bytes32(uint256(uint160(quoteToken)));
    _keyTuple[3] = bytes32(uint256(price));
    _keyTuple[4] = bytes32(uint256(amount));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(
    address user,
    address baseToken,
    address quoteToken,
    uint256 price,
    uint256 amount
  ) internal view returns (OrderData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](5);
    _keyTuple[0] = bytes32(uint256(uint160(user)));
    _keyTuple[1] = bytes32(uint256(uint160(baseToken)));
    _keyTuple[2] = bytes32(uint256(uint160(quoteToken)));
    _keyTuple[3] = bytes32(uint256(price));
    _keyTuple[4] = bytes32(uint256(amount));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    address user,
    address baseToken,
    address quoteToken,
    uint256 price,
    uint256 amount,
    uint8 orderSide,
    uint256 timestamp,
    bool active,
    uint256 next
  ) internal {
    bytes memory _staticData = encodeStatic(orderSide, timestamp, active, next);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](5);
    _keyTuple[0] = bytes32(uint256(uint160(user)));
    _keyTuple[1] = bytes32(uint256(uint160(baseToken)));
    _keyTuple[2] = bytes32(uint256(uint160(quoteToken)));
    _keyTuple[3] = bytes32(uint256(price));
    _keyTuple[4] = bytes32(uint256(amount));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    address user,
    address baseToken,
    address quoteToken,
    uint256 price,
    uint256 amount,
    uint8 orderSide,
    uint256 timestamp,
    bool active,
    uint256 next
  ) internal {
    bytes memory _staticData = encodeStatic(orderSide, timestamp, active, next);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](5);
    _keyTuple[0] = bytes32(uint256(uint160(user)));
    _keyTuple[1] = bytes32(uint256(uint160(baseToken)));
    _keyTuple[2] = bytes32(uint256(uint160(quoteToken)));
    _keyTuple[3] = bytes32(uint256(price));
    _keyTuple[4] = bytes32(uint256(amount));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(
    address user,
    address baseToken,
    address quoteToken,
    uint256 price,
    uint256 amount,
    OrderData memory _table
  ) internal {
    bytes memory _staticData = encodeStatic(_table.orderSide, _table.timestamp, _table.active, _table.next);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](5);
    _keyTuple[0] = bytes32(uint256(uint160(user)));
    _keyTuple[1] = bytes32(uint256(uint160(baseToken)));
    _keyTuple[2] = bytes32(uint256(uint160(quoteToken)));
    _keyTuple[3] = bytes32(uint256(price));
    _keyTuple[4] = bytes32(uint256(amount));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(
    address user,
    address baseToken,
    address quoteToken,
    uint256 price,
    uint256 amount,
    OrderData memory _table
  ) internal {
    bytes memory _staticData = encodeStatic(_table.orderSide, _table.timestamp, _table.active, _table.next);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](5);
    _keyTuple[0] = bytes32(uint256(uint160(user)));
    _keyTuple[1] = bytes32(uint256(uint160(baseToken)));
    _keyTuple[2] = bytes32(uint256(uint160(quoteToken)));
    _keyTuple[3] = bytes32(uint256(price));
    _keyTuple[4] = bytes32(uint256(amount));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  ) internal pure returns (uint8 orderSide, uint256 timestamp, bool active, uint256 next) {
    orderSide = (uint8(Bytes.getBytes1(_blob, 0)));

    timestamp = (uint256(Bytes.getBytes32(_blob, 1)));

    active = (_toBool(uint8(Bytes.getBytes1(_blob, 33))));

    next = (uint256(Bytes.getBytes32(_blob, 34)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (OrderData memory _table) {
    (_table.orderSide, _table.timestamp, _table.active, _table.next) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(address user, address baseToken, address quoteToken, uint256 price, uint256 amount) internal {
    bytes32[] memory _keyTuple = new bytes32[](5);
    _keyTuple[0] = bytes32(uint256(uint160(user)));
    _keyTuple[1] = bytes32(uint256(uint160(baseToken)));
    _keyTuple[2] = bytes32(uint256(uint160(quoteToken)));
    _keyTuple[3] = bytes32(uint256(price));
    _keyTuple[4] = bytes32(uint256(amount));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(address user, address baseToken, address quoteToken, uint256 price, uint256 amount) internal {
    bytes32[] memory _keyTuple = new bytes32[](5);
    _keyTuple[0] = bytes32(uint256(uint160(user)));
    _keyTuple[1] = bytes32(uint256(uint160(baseToken)));
    _keyTuple[2] = bytes32(uint256(uint160(quoteToken)));
    _keyTuple[3] = bytes32(uint256(price));
    _keyTuple[4] = bytes32(uint256(amount));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint8 orderSide,
    uint256 timestamp,
    bool active,
    uint256 next
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(orderSide, timestamp, active, next);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint8 orderSide,
    uint256 timestamp,
    bool active,
    uint256 next
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(orderSide, timestamp, active, next);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(
    address user,
    address baseToken,
    address quoteToken,
    uint256 price,
    uint256 amount
  ) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](5);
    _keyTuple[0] = bytes32(uint256(uint160(user)));
    _keyTuple[1] = bytes32(uint256(uint160(baseToken)));
    _keyTuple[2] = bytes32(uint256(uint160(quoteToken)));
    _keyTuple[3] = bytes32(uint256(price));
    _keyTuple[4] = bytes32(uint256(amount));

    return _keyTuple;
  }
}

/**
 * @notice Cast a value to a bool.
 * @dev Boolean values are encoded as uint8 (1 = true, 0 = false), but Solidity doesn't allow casting between uint8 and bool.
 * @param value The uint8 value to convert.
 * @return result The boolean value.
 */
function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}
